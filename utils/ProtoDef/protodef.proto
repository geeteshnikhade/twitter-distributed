syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}
  rpc Register (Credentials) returns (RegisterReply) {}
  rpc Login (Credentials) returns (LoginReply) {}
  rpc UserExists (UserExistsRequest) returns (UserExistsReply) {}
  rpc AddTweet (AddTweetRequest) returns (AddTweetReply) {}
  rpc OwnTweets (OwnTweetsRequest) returns (OwnTweetsReply) {}
  rpc DeleteUser (Credentials) returns (DeleteReply) {}
  rpc UsersToFollow (UsersToFollowRequest) returns (UsersToFollowResponse) {}
  rpc FollowUser (FollowUserRequest) returns (FollowUserResponse) {}
  rpc GetFriendsTweets (GetFriendsTweetsRequest) returns (GetFriendsTweetsResponse) {}
  rpc WhoIsPrimary (WhoisPrimaryRequest) returns (WhoIsPrimaryResponse) {}
  rpc HeartBeat (HeartBeatRequest) returns (HeartBeatResponse) {}
  rpc Prepare (PrepareArgs) returns (PrepareReply) {}
  rpc Recovery (RecoveryArgs) returns (RecoveryReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message Credentials {
    string uname = 1;
    string pwd = 2;
    bool broadcast = 3;
}

message RegisterReply {
    string message = 1;
}

message LoginReply {
    bool status = 1;
}

message UserExistsReply {
    bool status = 1;
}

message UserExistsRequest {
    string username = 1;
}

message AddTweetRequest {
    string username = 1;
    string tweet_text = 2;
    bool broadcast = 3;
}

message AddTweetReply {
    bool status = 1;
}

message Tweet {
    string text = 1;
}

message OwnTweetsReply {
    repeated Tweet tweetList = 1;
}

message OwnTweetsRequest {
    string username = 1 ;
}

message DeleteReply {
    bool deleteStatus = 1;
}

message User {
    string username = 1;
}

message UsersToFollowRequest {
    string username = 1;
}

message UsersToFollowResponse {
    repeated User usersToFollowList = 1;
}

message FollowUserRequest {
    string selfUsername = 1;
    string toFollowUsername = 2;
}

message FollowUserResponse {
    bool followStatus = 1;
}

message GetFriendsTweetsRequest{
    string username = 1;
}

message UsersAllTweets {
    User username = 1;
    repeated Tweet tweets = 2;
}

message GetFriendsTweetsResponse {
    repeated UsersAllTweets friendsTweets = 1;
}


//RPC's for viewstamp replication

message PrepareArgs {
	int32 View = 1;                    // the primary's current view
	int32 PrimaryCommit = 2;          // the primary's commitIndex
	int32 Index = 3;                 // the index position at which the log entry is to be replicated on backups
	string Entry = 4;
}


message PrepareReply  {
	int32 View = 1;                  // the backup's current view
	bool Success = 2;               // whether the Prepare request has been accepted or rejected
}

message RecoveryArgs  {
	int32 View = 1;                     // the view that the backup would like to synchronize with
	int32 Server = 2;                  // the server sending the Recovery RPC (for debugging)
}

message RecoveryReply {
	int32 View = 1;                     // the view of the primary
	repeated string Entries =2;        // the primary's log including entries replicated up to and including the view.
	int32 PrimaryCommit =3;           // the primary's commitIndex
	bool Success =4;                 // whether the Recovery request has been accepted or rejected
	repeated UserData Data = 5;
}

message UserData {
    string Username =1;
    string Password =2;
    repeated Tweet TweetList = 3;
    repeated string Follows =4;
}

message ViewChangeArgs {
	int32 View =1;                        // the new view to be changed into
}

message ViewChangeReply  {
	int32 LastNormalView  =1;            // the latest view which had a NORMAL status at the server
	repeated string Log =2;             // the log at the server
	bool Success=3;                    // whether the ViewChange request has been accepted/rejected
}

message StartViewArgs {
	int32 View =1;                        // the new view which has completed view-change
	repeated string Log=2;             // the log associated with the new new
}

message StartViewReply {
}

message WhoisPrimaryRequest {
}

message WhoIsPrimaryResponse {
    int32 Index =1;
}

message HeartBeatRequest {
}

message HeartBeatResponse {
    bool IsAlive = 1;
    int32 currentView = 2;
}
